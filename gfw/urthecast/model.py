# ndb model to store information for .png file generated by an urthecast tiles request.
# Note: from what I am reading about the memcache, sometimes a memcache record is dropped. Reason is
# sometimes random. In this case, if ndb has a record but a memcache search reveals that it is gone
# we should still recreate the memcache record with the same id as the previous memcache record.


from google.appengine.ext import ndb

class TilesUC(ndb.Model):
	# A tiles request is possibly a lot of parameters.
	# A URL generically: https://tile-{s}.urthecast.com/v1/{RENDERER}/{z}/{x}/{y}?{parameters}
	# where list of parameters are found in urthecast docs...
    # TODO Extend this model for the full parameter possibilities
    # Issue might be practical resource query-ability

	memcache_key = ndb.StringProperty()
    renderer = ndb.StringProperty()
	z = ndb.StringProperty()
	x = ndb.StringProperty()
	y = ndb.StringProperty()
    tiles = ndb.BlobProperty()
    created = ndb.DateTimeProperty(auto_now_add=True)
	
    kind = 'Urthecast Tiles entry in memcache'

    """ Class Methods """

    @classmethod
    def create(cls,memcache_key,renderer,z,x,y,tiles):
        """Create Tiles resource"""
        # TODO Error checking the passed params??
		tiles_uc = TilesUC(
			memcache_key = memcache_key,
        	renderer = renderer,
        	z = z,
        	x = x,
        	y = y,
        	tiles = tiles
        	)
        tiles_uc.put()
        return tiles_uc

    @classmethod
    def search_for(cls,memcache_key,renderer,z,x,y,tiles):
    	# Query for (possibly still cached) Tiles resource.
    	return cls.query(cls.memcache_key=memcache_key,cls.renderer=renderer,cls.z=z,cls.x=x,cls.y=y).fetch(1)

    """ Instance methods """

    def delete(self):
    	"""Deletes the tiles resource"""
    	self.key.delete()
